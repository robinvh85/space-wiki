div.container
  div.columns style="margin-top: 0px;"
    div.column.is-half style="padding: 0px 0.5em"
      button onclick="get_previous()"
        | <<
      button onclick="get_next()"
        | >>
      input#date_input.input type="text" style="width: 150px;"
      button onclick="get_data()"
        | Submit
    div.column.is-half style="padding: 0px 0.5em"
      table style="width: 400px;"
        tr
          td style="font-weight: bold"
            | Current Sell
          td
            label#current_sell.warn style="font-size: 1.1em"
          td style="font-weight: bold"
            | Current Buy
          td
            label#current_buy.warn style="font-size: 1.1em"
  div#orders.panel
    div.panel-heading
      | Orders
    div.panel-block      
      table.table.is-bordered style="width: 800px;"
        tr
          th Date
          th Sell price
          th Amount
          th
          th Profit
          th Buy price
          th
        tr
          th
          th 
            input type="text" style="width: 120px;" v-model="sell_obj.price"
          th
            input type="text" style="width: 120px;" v-model="sell_obj.amount"
          th
            a @click="sellOrder()"
              | Sell
          th
          th
          th
        tr v-for="item in order_list"
          td style="text-align: left;"
            | {{ item.created_at }}
          td style="text-align: left;"
            | {{ item.sell_price }}
          td style="text-align: left;"
            | {{ item.amount }}
          td style="text-align: center;"
            a v-show="item.sell_order_id != null && item.sold_order_id == null" @click="cancelSellOrder(item)"
              | Cancel
          td
            label v-show="item.sold_order_id != null && item.bought_order_id == null"
              | {{ item.current_profit }}%
          td style="text-align: left;"
            input v-show="item.sold_order_id != null && item.buy_order_id == null" type="text" style="width: 120px;"
            label v-show="item.buy_order_id != null"
              | {{ item.buy_price }}
            label v-show="item.buy_order_id != null"
              | &nbsp;({{ item.profit }}%)
          td style="text-align: center;"
            div v-show="item.sell_order_id != null"
              a v-show="item.sold_order_id != null && item.buy_order_id == null" href="#"
                | Buy
              a v-show="item.buy_order_id != null && item.bought_order_id == null" href="#"
                | Cancel
  div.panel
    div.panel-heading
      | Chart
    div.panel-block      
      div id='chart' style="width:100%;"

javascript:
  // create the chart

  var token = document.querySelector("[name='csrf-token']").content;
  axios.defaults.headers.common['X-CSRF-Token'] = token;

  var chart_type = '5m';
  var pairs = #{@currency_pairs.to_json.html_safe};
  var polo = #{@polo.to_json.html_safe};
  var decimal = 3;
  var chart = null;
  var current_pair = {
    id: 4,
    name: "USDT_BTC"
  };

  var max_point = {
    is_changing: false
  };

  var predict = null;

  var createChart5m = function(data, pair){  
    return Highcharts.stockChart('chart', {
      rangeSelector: getRangeSelector(chart_type),

      title: {
          text: chart_type + ' ' + pair.name
      },
      yAxis: [{
        title: {  // Volume
          text: null
        },
        labels: {
          enabled: false
        },
        lineWidth: 1,
        opposite: false    
      },{
        title: {
          text: ''
        },
        gridLineWidth: 0
      },{
        title: {
          text: ''
        },
        //height: 300,
        gridLineWidth: 0,
        opposite: false
      }],
      tooltip: false,

      series: [{
        type: 'column',
        name: 'Volume',
        data: data.volume_data,
        yAxis: 0,
        color: '#DDA',
        visible: false
      },{
        name: 'min',
        data: data.min_value,
        yAxis: 1,
        id: 'data_min'
      },{
        type: 'candlestick',
        name: 'candle',
        data: data.candle_data,
        yAxis: 1
      },{
        type: 'flags',
        name: 'Flags on series',
        data: [],
        onSeries: 'data_min',
        id: 'flag_max',
        shape: 'squarepin'
      }],
      chart: {
        events: {
          render: function(e){
            drawMinMaxLines(e.target, pair, 1);

            if(!max_point.is_changing){
              setTimeout(function(){
                showMaxFlag();
              }, 1000);
            }
          }
        },
        height: 700
      },
      legend: {
        enabled: true
      }
    });
  }

  var get_previous = function(){
    var date = $("#date_input").val();
    var dt = moment(date);

    $("#date_input").val(dt.subtract(1, 'days').format("Y/MM/DD"));
    load_charts_predict(current_pair);
  }

  var get_next = function(){
    var date = $("#date_input").val();
    var dt = moment(date);

    $("#date_input").val(dt.add(1, 'days').format("Y/MM/DD"));
    load_charts_predict(current_pair);
  }

  var get_data = function(){
    load_charts_predict(current_pair);
  }

  var load_charts_predict = function(pair){
    var url = "/ajax/chartso/get_5m_predict";
    axios.get(url , {params: { pair_id: pair.id, date: $("#date_input").val() }}).then(function (res){
      if(chart != null)
        chart.destroy();

      predict = res.data.predict;
      chart = createChart5m(res.data.pair_data, pair)
    });
  }

  var drawMinMaxLines = function(chart, pair, index){    
    axix = chart.yAxis[index];
    min_value = axix.dataMin;
    max_value = axix.dataMax;
    plot_min_id = 'plot_min_' + pair.name;
    plot_max_id = 'plot_max_' + pair.name;
    plot_yesterday_avg_id = 'plot_yesterday_avg_' + pair.name;
    plot_low1_value_id = 'plot_low1_value_id' + pair.name;
    plot_low2_value_id = 'plot_low2_value_id' + pair.name;
    plot_high1_value_id = 'plot_high1_value_id' + pair.name;
    plot_high2_value_id = 'plot_high2_value_id' + pair.name;

    axix.removePlotLine(plot_min_id);
    axix.removePlotLine(plot_max_id);
    axix.removePlotLine(plot_yesterday_avg_id);
    axix.removePlotLine(plot_low1_value_id);
    axix.removePlotLine(plot_low2_value_id);
    axix.removePlotLine(plot_high1_value_id);
    axix.removePlotLine(plot_high2_value_id);

    axix.addPlotLine({
      value: min_value,
      width: 1,
      color: 'red',
      dashStyle: 'longdashdot',              
      id: plot_min_id
    });

    axix.addPlotLine({
      value: max_value,
      width: 1,
      color: 'red',
      dashStyle: 'longdashdot',              
      id: plot_max_id
    });

    axix.addPlotLine({
      value: predict.yesterday_avg_value,
      width: 1,
      color: 'green',
      dashStyle: 'longdashdot',              
      id: plot_yesterday_avg_id
    }); 

    axix.addPlotLine({
      value: predict.low1_value,
      width: 1.5,
      color: 'black',
      dashStyle: 'longdashdot',              
      id: plot_low1_value_id
    }); 

    axix.addPlotLine({
      value: predict.low2_value,
      width: 1.5,
      color: 'black',
      dashStyle: 'longdashdot',              
      id: plot_low2_value_id
    }); 

    axix.addPlotLine({
      value: predict.high1_value,
      width: 1.5,
      color: 'black',
      dashStyle: 'longdashdot',              
      id: plot_high1_value_id
    }); 

    axix.addPlotLine({
      value: predict.high2_value,
      width: 1.5,
      color: 'black',
      dashStyle: 'longdashdot',              
      id: plot_high2_value_id
    }); 
  }

  var showMaxFlag = function(){
    max_point.is_changing = true;

    var yData = chart.yAxis[1].series["0"].processedYData;
    var axix = chart.yAxis[1];
    //var max_value = Math.max.apply(Math, yData);
    var max_value = Math.max.apply(Math, yData);
    var index = yData.indexOf(Math.max(max_value));
    var time_max_value = chart.yAxis[1].series["0"].processedXData[index];

    min_value = axix.dataMin;
    max_percent = ((max_value / min_value) * 100).toFixed(1);

    last_value = yData[yData.length - 1];
    current_with_max_percent = ((max_value / last_value) * 100).toFixed(1);

    chart.series[3].setData([{
      x: time_max_value,
      title: current_with_max_percent + ' / ' + max_percent
    }]);

    setTimeout(function(){
      max_point.is_changing = false;
    }, 100);    
  }

  var changeBaseUnit = function(obj){
    document.location = "/poloniex/predict?base_unit=" + obj.value
  }

  var getRangeSelector = function(chart_type){
    switch(chart_type){
      case '5m':
        return {
            selected: 1,
            buttons: [{
            type: 'hour',
            count: 12,
            text: '12h'
          }, {
            type: 'hour',
            count: 24,
            text: '24h'
          }, {
            type: 'hour',
            count: 48,
            text: '48h'
          },{
            type: 'all',
            text: 'All'
          }]
        };
        break;
    }
  }

  var addPlotHover = function(){
    $('#chart').mousemove(function(e){    
      // var chart = Highcharts.charts[Highcharts.charts.length - 1];
      //var xaxis = chart.xAxis[0];
      var yaxis = chart.yAxis[1];
      //xaxis.removePlotLine('plot-line-x');
      yaxis.removePlotLine('plot-line-y');
      //var x = xaxis.toValue(e.offsetX, false);
      var y = yaxis.toValue(e.offsetY, false);

      var y_current = chart.yAxis[1].toValue(e.offsetY, false);

      var yData = chart.yAxis[1].series["0"].processedYData;
      var last_value = yData[yData.length - 1];
      var percent_last_value = ((y_current / last_value) * 100).toFixed(1);


      if(y_current > 1000){
        y_current = y_current.toFixed(1);
      } else if(y_current > 100) {
        y_current = y_current.toFixed(2);
      } else if(y_current > 10){
        y_current = y_current.toFixed(3);
      } else if(y_current > 1){
        y_current = y_current.toFixed(4);
      } else if(y_current > 0.1) {
        y_current = y_current.toFixed(5);
      } else if(y_current > 0.01) {
        y_current = y_current.toFixed(6);
      } else if(y_current > 0.001) {
        y_current = y_current.toFixed(7);
      } else {
        y_current = y_current.toFixed(8);
      }

      yaxis.addPlotLine({
        value: y,
        color: 'green',
        width: 1,
        id: 'plot-line-y',
        label: {
          text: "(" + percent_last_value + "%) " + y_current,
          align: 'right',
          x: -40
        },
        zIndex: 99
      });
  });
  }

  var get_current_price = function(){
    var url = "/ajax/currency_pairs/get_current_price";
    axios.get(url).then(function (res){
      $("#current_sell").html(res.data.current_sell);
      $("#current_buy").html(res.data.current_buy);
      console.log(app);
      app.current_price = res.data.current_buy;
      document.title = res.data.current_sell + " - " + res.data.current_buy;
    });
  }

  $(function(){
    decimal = 8;
    $("#date_input").val(moment().format("Y/MM/DD"));

    get_data();
    addPlotHover();
    get_current_price();

    setInterval(get_current_price, 5 * 1000);
  });

  // Vue
  var token = document.querySelector("[name='csrf-token']").content;
  axios.defaults.headers.common['X-CSRF-Token'] = token;

  Vue.prototype.$http = axios;

  var app = new Vue({
    el: '#orders',
    data: {
      order_list: [],
      current_price: 0,
      sell_obj: {
        price: 0,
        amount: 0
      }
    },
    methods: {
      getOpenOrders: function(){
        var self = this;
        this.$http.get('/ajax/orders/get_open_order_btc').then(function (res){
          self.order_list = res.data
          
          for(var i=0; i<self.order_list.length; i++){
            var obj = self.order_list[i];
            obj.created_at = moment(obj.created_at).format("YYYY-MM-DD HH:mm:ss");
            obj.current_profit = 0;
          }
        });
      },
      getCurrentPrice: function(){
        var self = this;
        this.$http.get('/ajax/orders/get_open_order_btc').then(function (res){
          self.order_list = res.data
          console.log(res.data);
        });
      },
      sellOrder: function(){
        var self = this;

        if(parseFloat(this.sell_obj.price) < parseFloat(this.current_price) || parseFloat(this.sell_obj.price) >  5000){
          alert("Price is not valid");
          return;
        }

        if(confirm("Do you want to sell " + this.sell_obj.amount + " at price " + this.sell_obj.price )){
          this.$http.post('/ajax/orders/call_sell_btc', this.sell_obj).then(function (res){
            if(res.data != null){
              alert("Sell successfully !");
              this.getOpenOrders();
            } else {
              alert("Can not sell, please check !!!");
            }            
          });
        }
      },
      cancelSellOrder: function(item){
        var self = this;

        if(confirm("Do you want to cancel order [amount " + item.amount + " at price " + item.sell_price + "]")){
          this.$http.post('/ajax/orders/call_cancel_sell_btc', item).then(function (res){
            if(res.data != null){
              alert("Cancel sell successfully !");
              this.getOpenOrders();
            } else {
              alert("Can not cancel sell, please check !!!");
            }            
          });
        }
      },
      init: function(){
        console.log("INIT");
        this.getOpenOrders();
      }    
    },
    watch: {
      current_price: function (value) {
        for(var i=0; i < this.order_list.length; i++){
          var obj = this.order_list[i];

          if(obj.sold_order_id != null && obj.bought_order_id == null){ // Sold and not bought
            obj.current_profit = (obj.sell_price - parseFloat(value)) / parseFloat(value) * 100;
            obj.current_profit = obj.current_profit.toFixed(2);
          } 
          
          if(obj.buy_order_id != null) { // Da mua
            obj.profit = (obj.sell_price - obj.buy_price) / obj.buy_price * 100;
            obj.profit = obj.profit.toFixed(2);
          }
        }

        this.$forceUpdate();
      },
    },
    created: function() {
      console.log("created");
    },
    mounted: function() {
      console.log("mounted");
      this.init();
    }
  });

