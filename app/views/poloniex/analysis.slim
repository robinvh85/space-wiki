div#pair_list.columns.is-multiline style="width: 285px;"
  - @all_currency_pairs.each do |item|
    div.column.is-half
      input id="rdo_#{item.name}" name="rdo_pair" type="radio" pairname="#{item.name}" value=item.id class="rdo" onchange="rdoPairChange(this)"
        label for="rdo_#{item.name}" =item.name 
        label 
          | &nbsp;#{item.percent_min_24h}%
div#pair_note
  div
    textarea#note_item.input style="height: 300px;"
    button onclick="updateNote()"
      | Update
  div style="margin-top: 10px;"
    textarea#note_polo.input style="height: 300px;"
    button onclick="updatePoloNote()"
      | Update
div.container
  div.columns style="margin-top: 0px;"
    div.column.is-half style="padding: 0px 0.5em"
      select value="5m" onchange="changeType(this)" class="input"
        option value="5m"
          | 5m
        option value="15m"
          | 15m
        option value="30m"
          | 30m
        option value="2h"
          | 2h
        option value="4h"
          | 4h
        option value="1d"
          | 1d
    div.column.is-half style="padding: 0px 0.5em"
      select value="#{@base_unit}" onchange="changeBaseUnit(this)" class="input"
        option value="USDT"
          | USDT
        option value="BTC"
          | BTC
        option value="ETH"
          | ETH
        option value="XMR"
          | XMR
  div.panel
    div.panel-heading
      | Chart
    div.panel-block      
      div id='chart' style="width:100%;"

javascript:
  // create the chart

  var token = document.querySelector("[name='csrf-token']").content;
  axios.defaults.headers.common['X-CSRF-Token'] = token;

  var chart_type = '5m';
  var pairs = #{@currency_pairs.to_json.html_safe};
  var polo = #{@polo.to_json.html_safe};
  var pairs_hash = {};
  var base_unit = '#{@base_unit}';
  var decimal = 3;
  var chart = null;
  var current_pair = null;

  var max_point = {
    is_changing: false
  };


  var createChart5m = function(data, pair){  
    return Highcharts.stockChart('chart', {
      rangeSelector: getRangeSelector(chart_type),

      title: {
          text: chart_type + ' ' + pair.name
      },
      yAxis: [{
        title: {  // Volume
          text: null
        },
        labels: {
          enabled: false
        },
        lineWidth: 1,
        opposite: false    
      },{
        title: {
          text: ''
        },
        gridLineWidth: 0
      },{
        title: {
          text: ''
        },
        //height: 300,
        gridLineWidth: 0,
        opposite: false
      }],
      tooltip: {
        valueDecimals: decimal,
        //xDateFormat: 'Y'
      },

      series: [{
        type: 'column',
        name: 'Volume',
        data: data.volume_data,
        yAxis: 0,
        color: '#DDA'
      }
      /*,{
        type: 'candlestick',
        name: 'candle',
        data: data.candle_data,
        yAxis: 1
      }
      */,{
        name: 'min',
        data: data.min_value,
        yAxis: 1,
        id: 'data_min'
      },{
        name: 'BTC',
        data: data.btc_value,
        yAxis: 2
      },{
        type: 'flags',
        name: 'Flags on series',
        data: [],
        onSeries: 'data_min',
        id: 'flag_max',
        shape: 'squarepin'
      }],
      chart: {
        events: {
          render: function(e){
            drawMinMaxLines(e.target, pair);

            if(!max_point.is_changing){
              setTimeout(function(){
                showMaxFlag();
              }, 1000);
            }
          }
        },
        height: 700
      },
      legend: {
        enabled: true
      }
    });
  }
 
  var createChart = function(data, pair){  
    return Highcharts.stockChart('chart', {
      rangeSelector: getRangeSelector(chart_type),

      title: {
          text: chart_type + ' ' + pair.name
      },
      yAxis: [{
        title: {
          text: 'Volume'
        },
        //height: 200,
        lineWidth: 2,
        opposite: false        
      },
      {
        title: {
          text: ''
        },
        //height: 300,
        gridLineWidth: 0
      }],
      tooltip: {
        valueDecimals: decimal,
        //xDateFormat: 'Y'
      },

      series: [{
        type: 'column',
        name: 'Volume',
        data: data.volume_data,
        yAxis: 0,
        color: '#DDA'
      },{
        type: 'candlestick',
        name: 'candle',
        data: data.candle_data,
        yAxis: 1
      }],
      chart: {
        events: {
          render: function(e){
            drawMinMaxLines(e.target, pair);
            if(!max_point.is_changing){
              setTimeout(function(){              
                showMaxFlag();
              }, 1000);
            }
          }
        },
        height: 700
      },
    });
  }

  var changeType = function(obj){
    chart_type = obj.value;

    load_charts(current_pair);    
  }

  var rdoPairChange = function(obj){
    current_pair = {
      id: obj.value,
      name: $(obj).attr('pairname')
    };

    $("#note_item").val(pairs_hash[current_pair.id].note);
    load_charts(current_pair);
  }

  var load_charts = function(pair){
    var url = get_url();
    axios.get(url , {params: { pair_id: pair.id }}).then(function (res){
      if(chart != null)
        chart.destroy();

      if(chart_type == '5m'){
        chart = createChart5m(res.data, pair)
      }
      else
        chart = createChart(res.data, pair)
    });
  }

  var drawMinMaxLines = function(chart, pair){    
    axix = chart.yAxis[1];
    min_value = axix.dataMin;
    max_value = axix.dataMax;
    plot_min_id = 'plot_min_' + pair.name;
    plot_max_id = 'plot_max_' + pair.name;

    axix.removePlotLine(plot_min_id);
    axix.removePlotLine(plot_max_id);

    axix.addPlotLine({
      value: min_value,
      width: 1,
      color: 'red',
      dashStyle: 'longdashdot',              
      id: plot_min_id
    });

    axix.addPlotLine({
      value: max_value,
      width: 1,
      color: 'red',
      dashStyle: 'longdashdot',              
      id: plot_max_id
    });    
  }

  var showMaxFlag = function(){
    max_point.is_changing = true;

    var yData = chart.yAxis[1].series["0"].processedYData;
    var axix = chart.yAxis[1];
    //var max_value = Math.max.apply(Math, yData);
    var max_value = Math.max.apply(Math, yData);
    var index = yData.indexOf(Math.max(max_value));
    var time_max_value = chart.yAxis[1].series["0"].processedXData[index];

    min_value = axix.dataMin;
    max_percent = ((max_value / min_value) * 100).toFixed(1);

    last_value = yData[yData.length - 1];
    current_with_max_percent = ((max_value / last_value) * 100).toFixed(1);

    chart.series[3].setData([{
      x: time_max_value,
      title: current_with_max_percent + ' / ' + max_percent
    }]);

    setTimeout(function(){
      max_point.is_changing = false;
    }, 100);    
  }

  var changeBaseUnit = function(obj){
    document.location = "/poloniex/analysis?base_unit=" + obj.value
  }

  var getRangeSelector = function(chart_type){
    switch(chart_type){
      case '5m':
        return {
            selected: 1,
            buttons: [{
            type: 'hour',
            count: 12,
            text: '12h'
          }, {
            type: 'hour',
            count: 24,
            text: '24h'
          }, {
            type: 'hour',
            count: 48,
            text: '48h'
          },{
            type: 'all',
            text: 'All'
          }]
        };
        break;
      case '15m':
        return {
            selected: 1,
            buttons: [{
            type: 'day',
            count: 1,
            text: '1d'
          }, {
            type: 'day',
            count: 3,
            text: '3d'
          }, {
            type: 'day',
            count: 7,
            text: '7d'
          },{
            type: 'all',
            text: 'All'
          }]
        }
        break;
      case '30m':
        return {
            selected: 1,
            buttons: [{
            type: 'day',
            count: 3,
            text: '3d'
          }, {
            type: 'day',
            count: 7,
            text: '7d'
          }, {
            type: 'day',
            count: 14,
            text: '14d'
          },{
            type: 'all',
            text: 'All'
          }]
        }
        break;
      case '2h':
        return {
            selected: 1,
            buttons: [{
            type: 'day',
            count: 7,
            text: '7d'
          }, {
            type: 'day',
            count: 15,
            text: '15d'
          }, {
            type: 'day',
            count: 30,
            text: '30d'
          },{
            type: 'all',
            text: 'All'
          }]
        };
        break;
      case '4h':
        return {
            selected: 1,
            buttons: [{
            type: 'day',
            count: 14,
            text: '14d'
          }, {
            type: 'day',
            count: 30,
            text: '30d'
          }, {
            type: 'day',
            count: 60,
            text: '60d'
          },{
            type: 'all',
            text: 'All'
          }]
        }
        break;
      case '1d':
        return {
            selected: 1,
            buttons: [{
            type: 'month',
            count: 2,
            text: '2M'
          }, {
            type: 'month',
            count: 4,
            text: '4M'
          }, {
            type: 'month',
            count: 6,
            text: '6M'
          },{
            type: 'all',
            text: 'All'
          }]
        }
        break;
    }
  }

  var get_url = function(){
    switch(chart_type){
      case '5m':
        return '/ajax/chartso/get_5m';
        break;
      case '15m':
        return '/ajax/chartso/get_15m';
        break;
      case '30m':
        return '/ajax/chartso/get_30m';
        break;
      case '2h':
        return '/ajax/chartso/get_2h';
        break;
      case '4h':
        return '/ajax/chartso/get_4h';
        break;
      case '1d':
        return '/ajax/chartso/get_1d';
        break;
    }
  }

  var array_to_hash = function(arr, key){
    var hash = {};
    for(var i=0; i<arr.length; i++){
      hash[arr[i][key]] = arr[i];
    }

    return hash;
  }

  /*
  var changeNote = function(obj){
    pairs_hash[current_pair.id].note = obj.value;
    axios.post('/ajax/currency_pairs/update_note', {id: current_pair.id, note: obj.value}).then(function (res){
      console.log('Call: /ajax/currency_pairs/update_note', res.data);
    });
  }
  */

  var updateNote = function(){
    var note = $("#note_item").val();
    pairs_hash[current_pair.id].note = note;

    axios.post('/ajax/currency_pairs/update_note', {id: current_pair.id, note: note}).then(function (res){
      console.log('Call: /ajax/currency_pairs/update_note', res.data);
    });
  }

  var updatePoloNote = function(){
    var note = $("#note_polo").val();
    polo.note = note;

    axios.put('/ajax/polos/update', {polo: polo}).then(function (res){
      console.log('Call: /ajax/polos/update', res.data);
    });
  }

  var addPlotHover = function(){
    $('#chart').mousemove(function(e){    
      var chart = Highcharts.charts[Highcharts.charts.length - 1];
      //var xaxis = chart.xAxis[0];
      var yaxis = chart.yAxis[1];
      //xaxis.removePlotLine('plot-line-x');
      yaxis.removePlotLine('plot-line-y');
      //var x = xaxis.toValue(e.offsetX, false);
      var y = yaxis.toValue(e.offsetY, false);

      var y_current = chart.yAxis[1].toValue(e.offsetY, false);

      var yData = chart.yAxis[1].series["0"].processedYData;
      var last_value = yData[yData.length - 1];
      var percent_last_value = ((y_current / last_value) * 100).toFixed(1);


      if(y_current > 1000){
        y_current = y_current.toFixed(1);
      } else if(y_current > 100) {
        y_current = y_current.toFixed(2);
      } else if(y_current > 10){
        y_current = y_current.toFixed(3);
      } else if(y_current > 1){
        y_current = y_current.toFixed(4);
      } else if(y_current > 0.1) {
        y_current = y_current.toFixed(5);
      } else if(y_current > 0.01) {
        y_current = y_current.toFixed(6);
      } else if(y_current > 0.001) {
        y_current = y_current.toFixed(7);
      } else {
        y_current = y_current.toFixed(8);
      }

      /*
      xaxis.addPlotLine({
          value: x,
          color: 'red',
          width: 1,
          id: 'plot-line-x'
      }); */
      yaxis.addPlotLine({
        value: y,
        color: 'green',
        width: 1,
        id: 'plot-line-y',
        label: {
          text: "(" + percent_last_value + "%) " + y_current,
          align: 'right',
          x: -40
        },
        zIndex: 99
      });
  });
  }

  $(function(){

    if(base_unit == 'BTC'){
      decimal = 8;
    }

    pairs_hash = array_to_hash(pairs, 'id');
    $('option[value="' + base_unit + '"]')[0].selected = "selected"
    $($('[name="rdo_pair"]')[0]).trigger( "click" );

    $("#note_polo").val(polo.note);

    // load_charts(current_pair);
    /*
    setInterval(function(){ load_charts() }, 300 * 1000);

    for(var i=0; i<pairs.length; i++){
      var cbxs = $("#cbx_" + pairs[i].name);
      if(cbxs.length > 0)
        cbxs[0].checked = "checked";
    } 
    */

    addPlotHover();
  });

